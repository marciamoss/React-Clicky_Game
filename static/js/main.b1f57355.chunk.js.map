{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","components/Message/index.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","alt","id","src","image","onClick","guessedFriend","Wrapper","children","Navbar","href","counter","topScore","Message","Fragment","Modal_default","show","onHide","handleClose","Header","closeButton","Title","Body","msg","Footer","Button_default","variant","friends","forEach","element","i","App","state","lost","won","this","setState","handleShow","friendCopy","Object","toConsumableArray","_this","counterCopy","topScoreCopy","showCopy","lostCopy","handleShowCopy","bind","assertThisInitialized","handleCloseCopy","msgCopy","clicked","ShuffleArray","length","_this2","components_Wrapper","components_Navbar","components_Message","map","friend","components_FriendCard","key","large","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b1f57355.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"col-3\">\n      <div className=\"card\">\n        <div className=\"img-container\">\n          <img alt={props.id} src={props.image} onClick={() => props.guessedFriend(props.id)} className=\"remove\">\n          </img> \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navdeco\">\n      <div className=\"row\">\n        <div className=\"col-4\">\n          <a href=\"/\">Clicky Game</a>\n        </div>\n        <div className=\"col-4\">\n          Click an image to begin\n        </div>\n        <div className=\"col-4\">Score: {props.counter} | Top Score: {props.topScore}</div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Message(props) {\r\n    return (\r\n        <>\r\n            <Modal show={props.show} onHide={props.handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title></Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{props.msg}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={props.handleClose}>\r\n                    Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Message;","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport friends from \"./friends.json\";\nimport ShuffleArray from \"shuffle-array\";\nimport Message from \"./components/Message\";\n\n\n//set clicked as no by default\nfriends.forEach(function(element,i) {\n friends[i][\"clicked\"] = \"no\";\n});\n\nclass App extends Component {\n  \n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    counter:0,\n    topScore:0,\n    show: false,\n    lost: false,\n    won: false,\n    msg: \"\",\n    handleClose() {\n      this.setState({ show: false });\n    },\n    handleShow() {\n      this.setState({ show: true });\n    }\n  };\n  \n  \n  guessedFriend = id => {\n    const friendCopy = [...this.state.friends];\n    let counterCopy=this.state.counter;\n    let topScoreCopy=this.state.topScore;\n    let showCopy=this.state.show;\n    let lostCopy=this.state.lost;\n    let handleShowCopy = this.state.handleShow.bind(this);\n    let handleCloseCopy = this.state.handleClose.bind(this);\n    let msgCopy=this.state.msg;\n    //check if the current id has already been clicked\n    friendCopy.forEach((element,i) => {\n      if(i===(id - 1)){\n        if(friendCopy[i].clicked===\"yes\"){\n          if(topScoreCopy<counterCopy){\n            topScoreCopy=counterCopy;\n          }\n          counterCopy=0;\n          showCopy=true;\n          lostCopy=true;\n        }else{\n          counterCopy++;\n          if(topScoreCopy<counterCopy){\n            topScoreCopy=counterCopy;\n          }\n        }\n      }   \n    });\n    \n    // set clicked as yes for the clicked image\n    friendCopy[id - 1].clicked = 'yes';\n    \n    //shuffle the images\n    ShuffleArray(friendCopy);\n    //change the id to new position\n    friendCopy.forEach(function(element,i) {\n      element.id = i+1;\n    });\n\n    // set lost msg for modal\n    if(lostCopy){\n      msgCopy=\"You Lost, Try Again!\";\n    }\n    //set won msg for modal\n    if(counterCopy===friendCopy.length){\n      showCopy=true;\n      counterCopy=0;\n      msgCopy=\"You Won!, Play Again!\";\n    };\n\n    //if lost or won reset the state for clicked\n    if(showCopy || (counterCopy===friendCopy.length)){\n      friendCopy.forEach(function(element,i) {\n        friendCopy[i].clicked = 'no';\n      });\n    };\n    \n    // Set this.state.friends equal to the new friends array\n    this.setState({ friends: friendCopy, counter: counterCopy, topScore: topScoreCopy, show: showCopy, msg: msgCopy, handleShow: handleShowCopy, handleClose: handleCloseCopy });\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Navbar counter={this.state.counter} topScore={this.state.topScore}></Navbar>\n        <Message show={this.state.show} msg={this.state.msg} handleClose={this.state.handleClose}></Message>\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.friends.map(friend => (\n              <FriendCard\n                guessedFriend={this.guessedFriend}\n                id={friend.id}\n                key={friend.id}\n                image={friend.large}\n              />\n            ))}\n          </div>\n          </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}