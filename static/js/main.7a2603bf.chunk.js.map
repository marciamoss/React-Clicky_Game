{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","components/Message/index.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","alt","id","src","image","onClick","guessedFriend","Wrapper","children","Navbar","href","counter","topScore","Message","msgdeco","msg","console","log","color","textAlign","fontWeight","Fragment","Modal_default","show","onHide","handleClose","Header","closeButton","Title","Body","style","currentScore","Footer","Button_default","variant","friends","forEach","element","i","App","state","lost","won","this","setState","handleShow","friendCopy","Object","toConsumableArray","_this","counterCopy","currentScoreCopy","topScoreCopy","showCopy","lostCopy","handleShowCopy","bind","assertThisInitialized","handleCloseCopy","msgCopy","clicked","ShuffleArray","length","_this2","components_Wrapper","components_Navbar","components_Message","map","friend","components_FriendCard","key","large","Component","ReactDOM","render","react_router_dom","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7a2603bf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"col-3\">\n      <div className=\"card\">\n        <div className=\"img-container\">\n          <img alt={props.id} src={props.image} onClick={() => props.guessedFriend(props.id)} className=\"remove\">\n          </img> \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navdeco\">\n      <div className=\"row\">\n        <div className=\"col-4\">\n          <a href=\"/React-Clicky_Game/#\">Clicky Game</a>\n        </div>\n        <div className=\"col-4\">\n          Click an image to begin\n        </div>\n        <div className=\"col-4\">Score: {props.counter} | Top Score: {props.topScore}</div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nfunction Message(props) {\r\n    //conditional styling for win and lose\r\n    let msgdeco;\r\n    if(props.msg===\"You Lost, Try Again!\"){\r\n        console.log(\"here\");\r\n        msgdeco= {\r\n            color: \"red\",\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\"\r\n          }\r\n    }else{\r\n        msgdeco= {\r\n            color: \"blue\",\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\"\r\n          }\r\n    }\r\n    return (\r\n        <>\r\n            <Modal show={props.show} onHide={props.handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title></Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body style={msgdeco}>{props.msg} <br/>Your Current Score: {props.currentScore}, <br/>Top Score: {props.topScore}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={props.handleClose}>\r\n                    Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Message;","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport friends from \"./friends.json\";\nimport ShuffleArray from \"shuffle-array\";\nimport Message from \"./components/Message\";\n\n\n//set clicked as no by default\nfriends.forEach(function(element,i) {\n friends[i][\"clicked\"] = \"no\";\n});\n\nclass App extends Component {\n  \n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    counter:0,\n    topScore:0,\n    currentScore:0,\n    show: false,\n    lost: false,\n    won: false,\n    msg: \"\",\n    handleClose() {\n      this.setState({ show: false });\n    },\n    handleShow() {\n      this.setState({ show: true });\n    }\n  };\n  \n  \n  guessedFriend = id => {\n    const friendCopy = [...this.state.friends];\n    let counterCopy=this.state.counter;\n    let currentScoreCopy=this.state.currentScore;\n    let topScoreCopy=this.state.topScore;\n    let showCopy=this.state.show;\n    let lostCopy=this.state.lost;\n    let handleShowCopy = this.state.handleShow.bind(this);\n    let handleCloseCopy = this.state.handleClose.bind(this);\n    let msgCopy=this.state.msg;\n    //check if the current id has already been clicked\n    friendCopy.forEach((element,i) => {\n      if(i===(id - 1)){\n        if(friendCopy[i].clicked===\"yes\"){\n          if(topScoreCopy<counterCopy){\n            topScoreCopy=counterCopy;\n          }\n          currentScoreCopy=counterCopy;\n          counterCopy=0;\n          showCopy=true;\n          lostCopy=true;\n        }else{\n          counterCopy++;\n          if(topScoreCopy<counterCopy){\n            topScoreCopy=counterCopy;\n          }\n        }\n      }   \n    });\n    \n    // set clicked as yes for the clicked image\n    friendCopy[id - 1].clicked = 'yes';\n    \n    //shuffle the images\n    ShuffleArray(friendCopy);\n    //change the id to new position\n    friendCopy.forEach(function(element,i) {\n      element.id = i+1;\n    });\n\n    // set lost msg for modal\n    if(lostCopy){\n      msgCopy=\"You Lost, Try Again!\";\n    }\n    //set won msg for modal\n    if(counterCopy===friendCopy.length){\n      showCopy=true;\n      currentScoreCopy=counterCopy;\n      counterCopy=0;\n      msgCopy=\"You Won!, Play Again!\";\n    };\n\n    //if lost or won reset the state for clicked\n    if(showCopy || (counterCopy===friendCopy.length)){\n      friendCopy.forEach(function(element,i) {\n        friendCopy[i].clicked = 'no';\n      });\n    };\n    \n    // Set this.state.friends equal to the new friends array\n    this.setState({ friends: friendCopy, counter: counterCopy, currentScore: currentScoreCopy, topScore: topScoreCopy, show: showCopy, msg: msgCopy, handleShow: handleShowCopy, handleClose: handleCloseCopy });\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Navbar counter={this.state.counter} topScore={this.state.topScore}></Navbar>\n        <Message show={this.state.show} msg={this.state.msg} handleClose={this.state.handleClose} \n                 currentScore={this.state.currentScore} topScore={this.state.topScore}>\n        </Message>\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.friends.map(friend => (\n              <FriendCard\n                guessedFriend={this.guessedFriend}\n                id={friend.id}\n                key={friend.id}\n                image={friend.large}\n              />\n            ))}\n          </div>\n          </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(<Router><App /></Router>, document.getElementById(\"root\"));\n"],"sourceRoot":""}